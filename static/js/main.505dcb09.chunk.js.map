{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Cells","this","props","arr","map","el","index","react_default","a","createElement","key","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","request","dataResult","name","data","temporyObj","forks","open_issues","score","reqUrl","concat","fetch","then","json","dataReq","items","forEach","item","push","parseInt","length","setState","prevState","toConsumableArray","catch","err","console","error","handleChange","event","newArr","state","slice","target","checked","newEl","find","serial","newSerial","filter","_this2","req","_this3","options","chart","type","legend","layout","title","text","plotOptions","series","stacking","xAxis","categories","className","elem","Checkbox_default","color","onChange","App_Cells","highcharts_react_min_default","highcharts","Highcharts","constructorType","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.505dcb09.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n\nimport './App.scss';\n\nclass Cells extends Component {\n    render () {\n      return (\n        this.props.arr.map((el, index)=> {  \n          return (\n            <span key = {index}>{el}</span>\n          )               \n      })\n      )\n    }\n  }\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [],\n      serial: []\n    }\n  }\n\n  componentDidMount() {\n    const requestes = ['react', 'wordpress', 'javascript', 'angular'];\n    requestes.forEach(req => this.getData(req))    \n  }\n\n  getData = request => {\n    const dataResult = {\n      name: request,\n      data: []\n    };  \n    const temporyObj = {\n      forks : 0,\n      open_issues : 0,\n      score : 0\n    };  \n    const reqUrl = `https://api.github.com/search/repositories?q=${request}`;\n    fetch(reqUrl)\n    .then(data=>data.json())\n    .then(dataReq=>{    \n      dataReq.items.forEach(item => {\n        temporyObj.forks += item.forks;\n        temporyObj.open_issues += item.open_issues;\n        temporyObj.score += item.score;\n      })\n      for(let key in temporyObj){\n        dataResult.data.push(parseInt(temporyObj[key] / dataReq.items.length));\n      }\n      this.setState(prevState => ({\n        data: [...prevState.data, dataResult]\n      }))\n    })\n    .catch(err=>console.error(err));    \n  }\n  \n  handleChange = (event) => {\n    const newArr = this.state.data.slice();\n    if (event.target.checked) {\n      const newEl = newArr.find(el=>el.name === event.target.name);\n      this.setState(prevState =>({\n        serial: [...prevState.serial, newEl]\n      }))\n    } else {\n      const newSerial = this.state.serial.slice().filter(el=>el.name !== event.target.name);\n      this.setState({\n        serial: [...newSerial]\n      })\n    }\n  }\n  \n\n\n  render() {\n    \n    \n    const options = {\n      chart: {\n        type: 'bar'\n      },\n      legend: {\n        layout: 'horizontal',        \n      },\n      title: {\n        text: 'My stock chart'\n      },\n      plotOptions: {\n        series: {\n            stacking: 'normal'\n        }\n      },\n      xAxis: {\n        categories: ['Forks','Open issues', 'Score']\n      },\n      series: [...this.state.serial]\n    }\n    \n    return (\n      <div className=\"App\">        \n        <div className = \"table\">\n          <div className = 'row title'>\n            <span className = 'check'></span>\n            <span>Name</span>\n            <span>Forks</span>\n            <span>Open issues</span>\n            <span>Score</span>\n          </div>\n          {this.state.data.map((elem, index)=>{\n            return (\n              <div className = 'row' key = {index}>\n                <span className = 'check'>\n                <Checkbox\n                  color= \"primary\"\n                  name = {elem.name}\n                  onChange={this.handleChange}\n                />\n                </span>\n                <span>{elem.name}</span>\n                <Cells arr={elem.data} />\n              </div>           \n            )\n          })}\n        </div>\n        <HighchartsReact\n            highcharts={Highcharts}\n            constructorType={'chart'}\n            options={options}\n          />\n      </div>\n    ) \n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}